{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlicer = createSlice({\n  name: \"counter\",\n  initialCounterState,\n  reducers: {\n    increment: state => {\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter--;\n    },\n    increase: (state, action) => {\n      state.counter += action.payload;\n    },\n    toggleCounter: state => {\n      state.showCounter = !state.showCounter;\n    }\n  }\n}); // The reducer prop could handle an object with multiple reducers\n\nconst store = configureStore({\n  reducer: counterSlicer.reducer\n});\nexport const counterActions = counterSlicer.actions;\nexport default store; ////////////////////////////////////////////////////////////////////////////////\n// OLD WAY OF DOING THE REDUCERS FOT THE STORE ////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n/**\r\nimport { createStore } from \"redux\";\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"INCREASE\") {\r\n    return {\r\n      counter: state.counter + action.payload,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"TOGGLE_COUNTER\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);**/","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlicer","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"sources":["C:/Users/byjon/Desktop/React/Redux/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nconst counterSlicer = createSlice({\r\n  name: \"counter\",\r\n  initialCounterState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.counter++;\r\n    },\r\n    decrement: (state) => {\r\n      state.counter--;\r\n    },\r\n    increase: (state, action) => {\r\n      state.counter += action.payload;\r\n    },\r\n    toggleCounter: (state) => {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n// The reducer prop could handle an object with multiple reducers\r\nconst store = configureStore({\r\n  reducer: counterSlicer.reducer,\r\n});\r\n\r\nexport const counterActions = counterSlicer.actions;\r\n\r\nexport default store;\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n// OLD WAY OF DOING THE REDUCERS FOT THE STORE ////////////////////////////////\r\n////////////////////////////////////////////////////////////////////////////////\r\n/**\r\nimport { createStore } from \"redux\";\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"INCREMENT\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"INCREASE\") {\r\n    return {\r\n      counter: state.counter + action.payload,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DECREMENT\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"TOGGLE_COUNTER\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);**/\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAX;EAAcC,WAAW,EAAE;AAA3B,CAA5B;AAEA,MAAMC,aAAa,GAAGL,WAAW,CAAC;EAChCM,IAAI,EAAE,SAD0B;EAEhCJ,mBAFgC;EAGhCK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpBA,KAAK,CAACN,OAAN;IACD,CAHO;IAIRO,SAAS,EAAGD,KAAD,IAAW;MACpBA,KAAK,CAACN,OAAN;IACD,CANO;IAORQ,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;MAC3BH,KAAK,CAACN,OAAN,IAAiBS,MAAM,CAACC,OAAxB;IACD,CATO;IAURC,aAAa,EAAGL,KAAD,IAAW;MACxBA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;IACD;EAZO;AAHsB,CAAD,CAAjC,C,CAmBA;;AACA,MAAMW,KAAK,GAAGd,cAAc,CAAC;EAC3Be,OAAO,EAAEX,aAAa,CAACW;AADI,CAAD,CAA5B;AAIA,OAAO,MAAMC,cAAc,GAAGZ,aAAa,CAACa,OAArC;AAEP,eAAeH,KAAf,C,CAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}