{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\byjon\\\\Desktop\\\\React\\\\Databases\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // We can transform this function to change the way we code the response\n\n  /**function fetchMoviesHandler() {\n    // Default is GET\n    // As fetch is an asynchronous function we need to make sure the result is already load into the app\n    fetch(\"https://swapi.dev/api/films/\")\n      .then((response) => {\n        return response.json(); // Built-in method that transform the response into objects\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies); // We gotta make sure the name of the properties are the same we are going to use\n      });\n  }*/\n  // If we add the keyword async we are telling JS that we want to be able to wait for some promise (response)\n  // and then work with this data as we want.\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null); // Default is GET\n    // Coding the function this way we wait for the response to end and give JS permission to continue executing its function code.\n\n    try {\n      const response = await fetch(\"https://react-http-ea9c9-default-rtdb.europe-west1.firebasedatabase.app/movies.json\"); // We need to check wether the response returned and ok state or an error code like 202, 201, ...\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies); // We gotta make sure the name of the properties are the same we are going to use\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    // In this case we are using the POST section\n    const response = await fetch(\"https://react-http-ea9c9-default-rtdb.europe-west1.firebasedatabase.app/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      // We need a JSON object in the body\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = response.json();\n    console.log(data);\n  } // We can refactor the second section of the fragment by analazying the state of the request outside the render\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","transformedMovies","results","map","movieData","episode_id","opening_crawl","release_date","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"sources":["C:/Users/byjon/Desktop/React/Databases/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // We can transform this function to change the way we code the response\n  /**function fetchMoviesHandler() {\n    // Default is GET\n    // As fetch is an asynchronous function we need to make sure the result is already load into the app\n    fetch(\"https://swapi.dev/api/films/\")\n      .then((response) => {\n        return response.json(); // Built-in method that transform the response into objects\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies); // We gotta make sure the name of the properties are the same we are going to use\n      });\n  }*/\n\n  // If we add the keyword async we are telling JS that we want to be able to wait for some promise (response)\n  // and then work with this data as we want.\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    // Default is GET\n    // Coding the function this way we wait for the response to end and give JS permission to continue executing its function code.\n    try {\n      const response = await fetch(\n        \"https://react-http-ea9c9-default-rtdb.europe-west1.firebasedatabase.app/movies.json\"\n      );\n\n      // We need to check wether the response returned and ok state or an error code like 202, 201, ...\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        });\n      }\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies); // We gotta make sure the name of the properties are the same we are going to use\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    // In this case we are using the POST section\n    const response = await fetch(\n      \"https://react-http-ea9c9-default-rtdb.europe-west1.firebasedatabase.app/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie), // We need a JSON object in the body\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    const data = response.json();\n    console.log(data);\n  }\n\n  // We can refactor the second section of the fragment by analazying the state of the request outside the render\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}