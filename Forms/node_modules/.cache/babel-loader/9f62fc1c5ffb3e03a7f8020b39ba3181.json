{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\byjon\\\\Desktop\\\\React\\\\Forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // We use the useState hook to keep track of the value of the input always\n  const [enteredName, setEnteredName] = useState(\"\"); // We use the useState hook to keep track of the validity of the input\n\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); // We use the useState hook to keep track of the state of the validity\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // We check if the input has a valid input\n    // It is necessary to check on the event.target.value because the value of the input is not updated yet on the state\n\n    if (event.target.value.trim().length !== 0) {\n      setEnteredNameIsValid(true);\n    } else {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true); // We check if the input is empty\n\n    if (enteredName.trim().length === 0) {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true); // We check if the input is empty\n\n    if (enteredName.trim().length === 0) {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName); // We can also access the DOM element directly\n    //nameInputRef.current.value = \"\"; // Clear the input (not the ideal way to do it, cause we are changing the DOM directly)\n\n    setEnteredName(\"\"); // Reset the input value\n  }; //\n\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // We use the css class needed for the validity of the input\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"E+J08VDKU5xPbhzR5ys5bmcr9/o=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","event","target","value","trim","length","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputIsInvalid","nameInputClasses","nameInputRef"],"sources":["C:/Users/byjon/Desktop/React/Forms/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  // We use the useState hook to keep track of the value of the input always\n  const [enteredName, setEnteredName] = useState(\"\");\n\n  // We use the useState hook to keep track of the validity of the input\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  // We use the useState hook to keep track of the state of the validity\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n\n    // We check if the input has a valid input\n    // It is necessary to check on the event.target.value because the value of the input is not updated yet on the state\n    if (event.target.value.trim().length !== 0) {\n      setEnteredNameIsValid(true);\n    } else {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n\n    // We check if the input is empty\n    if (enteredName.trim().length === 0) {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    // We check if the input is empty\n    if (enteredName.trim().length === 0) {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n\n    console.log(enteredName);\n\n    // We can also access the DOM element directly\n    //nameInputRef.current.value = \"\"; // Clear the input (not the ideal way to do it, cause we are changing the DOM directly)\n    setEnteredName(\"\"); // Reset the input value\n  };\n\n  //\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // We use the css class needed for the validity of the input\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAF6B,CAI7B;;EACA,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D,CAL6B,CAO7B;;EACA,MAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;;EAEA,MAAMS,sBAAsB,GAAIC,KAAD,IAAW;IACxCN,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADwC,CAGxC;IACA;;IACA,IAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,GAA0BC,MAA1B,KAAqC,CAAzC,EAA4C;MAC1CR,qBAAqB,CAAC,IAAD,CAArB;IACD,CAFD,MAEO;MACLA,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CAVD;;EAYA,MAAMS,oBAAoB,GAAIL,KAAD,IAAW;IACtCF,qBAAqB,CAAC,IAAD,CAArB,CADsC,CAGtC;;IACA,IAAIL,WAAW,CAACU,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;MACnCR,qBAAqB,CAAC,KAAD,CAArB;IACD;EACF,CAPD;;EASA,MAAMU,qBAAqB,GAAIN,KAAD,IAAW;IACvCA,KAAK,CAACO,cAAN;IAEAT,qBAAqB,CAAC,IAAD,CAArB,CAHuC,CAKvC;;IACA,IAAIL,WAAW,CAACU,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;MACnCR,qBAAqB,CAAC,KAAD,CAArB;MACA;IACD;;IAEDA,qBAAqB,CAAC,IAAD,CAArB;IAEAY,OAAO,CAACC,GAAR,CAAYhB,WAAZ,EAbuC,CAevC;IACA;;IACAC,cAAc,CAAC,EAAD,CAAd,CAjBuC,CAiBnB;EACrB,CAlBD,CA/B6B,CAmD7B;;;EACA,MAAMgB,kBAAkB,GAAG,CAACf,kBAAD,IAAuBE,kBAAlD,CApD6B,CAsD7B;;EACA,MAAMc,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEJ,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEK,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAEC,YADP;QAEE,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAEb,sBAJZ;QAKE,MAAM,EAAEM,oBALV;QAME,KAAK,EAAEZ;MANT;QAAA;QAAA;QAAA;MAAA,QAFF,EAUGiB,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAfF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAhFD;;GAAMnB,W;;KAAAA,W;AAkFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}