{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\byjon\\\\Desktop\\\\React\\\\Forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // We use the useState hook to keep track of the value of the input always\n  const [enteredName, setEnteredName] = useState(\"\"); // We use the useState hook to keep track of the state of the validity\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); // We save some code by using a constant instead of a state\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  let formIsValid = false; // We can check for all the validity of the form if we want (example: several inputs)\n\n  if (enteredNameIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true); // We check if the input is empty\n\n    if (!enteredNameIsValid) {\n      return;\n    } // We can also access the DOM element directly\n    //nameInputRef.current.value = \"\"; // Clear the input (not the ideal way to do it, cause we are changing the DOM directly)\n\n\n    setEnteredName(\"\"); // Reset the input value\n\n    setEnteredNameTouched(false); // Reset the input state\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // We use the css class needed for the validity of the input\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"nLPwRBBCARNBsLUgNqKrhA7EIUU=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","nameInputIsInvalid","nameInputClasses"],"sources":["C:/Users/byjon/Desktop/React/Forms/src/components/SimpleInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  // We use the useState hook to keep track of the value of the input always\n  const [enteredName, setEnteredName] = useState(\"\");\n\n  // We use the useState hook to keep track of the state of the validity\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // We save some code by using a constant instead of a state\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n\n  let formIsValid = false;\n\n  // We can check for all the validity of the form if we want (example: several inputs)\n  if (enteredNameIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true);\n\n    // We check if the input is empty\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    // We can also access the DOM element directly\n    //nameInputRef.current.value = \"\"; // Clear the input (not the ideal way to do it, cause we are changing the DOM directly)\n    setEnteredName(\"\"); // Reset the input value\n    setEnteredNameTouched(false); // Reset the input state\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // We use the css class needed for the validity of the input\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty!</p>\n        )}\n      </div>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C,CAF6B,CAI7B;;EACA,MAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;EAEA,MAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;EAEA,MAAM,CAACS,mBAAD,EAAsBC,sBAAtB,IAAgDV,QAAQ,CAAC,KAAD,CAA9D,CAT6B,CAW7B;;EACA,MAAMW,kBAAkB,GAAGR,WAAW,CAACS,IAAZ,OAAuB,EAAlD;EAEA,IAAIC,WAAW,GAAG,KAAlB,CAd6B,CAgB7B;;EACA,IAAIF,kBAAJ,EAAwB;IACtBE,WAAW,GAAG,IAAd;EACD;;EAED,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;IACxCX,cAAc,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACD,CAFD;;EAIA,MAAMC,oBAAoB,GAAIH,KAAD,IAAW;IACtCT,qBAAqB,CAAC,IAAD,CAArB;EACD,CAFD;;EAIA,MAAMa,qBAAqB,GAAIJ,KAAD,IAAW;IACvCA,KAAK,CAACK,cAAN;IAEAd,qBAAqB,CAAC,IAAD,CAArB,CAHuC,CAKvC;;IACA,IAAI,CAACK,kBAAL,EAAyB;MACvB;IACD,CARsC,CAUvC;IACA;;;IACAP,cAAc,CAAC,EAAD,CAAd,CAZuC,CAYnB;;IACpBE,qBAAqB,CAAC,KAAD,CAArB,CAbuC,CAaT;EAC/B,CAdD;;EAgBA,MAAMe,kBAAkB,GAAG,CAACV,kBAAD,IAAuBN,kBAAlD,CA7C6B,CA+C7B;;EACA,MAAMiB,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEF,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAER,sBAHZ;QAIE,MAAM,EAAEI,oBAJV;QAKE,KAAK,EAAEf;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGkB,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAcE;MAAK,SAAS,EAAEC,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,OAFL;QAGE,QAAQ,EAAER,sBAHZ;QAIE,MAAM,EAAEI,oBAJV;QAKE,KAAK,EAAEf;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGkB,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAdF,eA2BE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,QAAQ,EAAE,CAACR,WAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QA3BF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiCD,CArFD;;GAAMZ,W;;KAAAA,W;AAuFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}