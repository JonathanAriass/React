{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\byjon\\\\Desktop\\\\React\\\\Forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // With the ref we only access the DOM element once (when needed), instead of every time the component is rendered\n  const nameInputRef = useRef(); // We use the useState hook to keep track of the value of the input always\n\n  const [enteredName, setEnteredName] = useState(\"\");\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // We check if the input is empty\n\n    if (enteredName.trim().length === 0) {\n      return;\n    }\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value; // Pointer to the current input element\n\n    console.log(enteredValue); // We can also access the DOM element directly\n    //nameInputRef.current.value = \"\"; // Clear the input (not the ideal way to do it, cause we are changing the DOM directly)\n\n    setEnteredName(\"\"); // Reset the input value\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"OtW4WQfH+l9HPCIGRWvyE1+oXJw=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","SimpleInput","props","nameInputRef","enteredName","setEnteredName","nameInputChangeHandler","event","target","value","formSubmissionHandler","preventDefault","trim","length","console","log","enteredValue","current"],"sources":["C:/Users/byjon/Desktop/React/Forms/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  // With the ref we only access the DOM element once (when needed), instead of every time the component is rendered\n  const nameInputRef = useRef();\n\n  // We use the useState hook to keep track of the value of the input always\n  const [enteredName, setEnteredName] = useState(\"\");\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    // We check if the input is empty\n    if (enteredName.trim().length === 0) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    const enteredValue = nameInputRef.current.value; // Pointer to the current input element\n    console.log(enteredValue);\n\n    // We can also access the DOM element directly\n    //nameInputRef.current.value = \"\"; // Clear the input (not the ideal way to do it, cause we are changing the DOM directly)\n    setEnteredName(\"\"); // Reset the input value\n  };\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className=\"form-control\">\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          value={enteredName}\n        />\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B;EACA,MAAMC,YAAY,GAAGJ,MAAM,EAA3B,CAF6B,CAI7B;;EACA,MAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;;EAEA,MAAMM,sBAAsB,GAAIC,KAAD,IAAW;IACxCF,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;EACD,CAFD;;EAIA,MAAMC,qBAAqB,GAAIH,KAAD,IAAW;IACvCA,KAAK,CAACI,cAAN,GADuC,CAGvC;;IACA,IAAIP,WAAW,CAACQ,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;MACnC;IACD;;IAEDC,OAAO,CAACC,GAAR,CAAYX,WAAZ;IAEA,MAAMY,YAAY,GAAGb,YAAY,CAACc,OAAb,CAAqBR,KAA1C,CAVuC,CAUU;;IACjDK,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAXuC,CAavC;IACA;;IACAX,cAAc,CAAC,EAAD,CAAd,CAfuC,CAenB;EACrB,CAhBD;;EAkBA,oBACE;IAAM,QAAQ,EAAEK,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAC,cAAf;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAEP,YADP;QAEE,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAEG,sBAJZ;QAKE,KAAK,EAAEF;MALT;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAWE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CA9CD;;GAAMH,W;;KAAAA,W;AAgDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}